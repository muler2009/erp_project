  {
    userManagemenu.map((menuItem, index) => (
        <div key={index} className='relative z-20 cursor-pointer' onClick={() => setIsOpen(prevState => !prevState)}>
            <span className={`flex justify-start items-center font-Poppins px-3 py-1 text-[14px] text-gray-500 ${openDropdown === index && 'bg-[#e6e6e6] border-b-[2px] border-green-600'}`}>
                <p className={`pr-1 ${openDropdown === index && 'text-black'}`}>{menuItem.label}</p>
                {
                menuItem.hasDropdown ? (
                    openDropdown === index ? <IoIcons.IoCaretBackSharp size={13} className='' /> : <IoIcons.IoCaretForwardSharp size={13} /> 
                ) : null
                }
            </span>
        </div>
))}

 <div className={`${menuItem.hasDropdown ? 'block' : 'none'}`}>
        {
        openDropdown === index && menuItem.hasDropdown && menuItem.dropdownItems && menuItem.dropdownItems.length > 0 && (
            <div className='w-[200px] bg-white flex flex-col absolute top-[30px] -right-0 shadow-lg cursor-pointer pb-2 pt-1 z-10 border'>
            {
                menuItem?.dropdownItems?.map((dropdownItem, dropdownIndex) => (
                <>
                    <div key={dropdownIndex}  className="px-2 py-2 font-Poppins text-[12px] hover:bg-gray-300 hover:bg-opacity-60"  >
                    <div className='flex justify-start items-center'>
                        s
                    </div>
                    </div>  
                </>
                ))
            }
            </div>
        ) 
    }
</div>

<div className='relative z-20 cursor-pointer'>
                  <div className={`flex justify-start items-center space-x-1 rounded-[2px] pt-2 font-Poppins px-3 py-1 text-[14px] text-gray-500`}  
                    onClick={() => setIsOpen(prevState => !prevState)} >
                      <p className={`pr-1 py-2 px-2 ${isOpen && 'bg-[#e6e6e6] border-b-[2px] border-green-600'}`}>User Account</p>
                      <span>{ isOpen ? <IoIcons.IoCaretBackSharp size={13} /> : <IoIcons.IoCaretForwardSharp size={13} /> } </span>

                        {
                          isOpen && (
                            <div className='w-[200px] bg-white flex flex-col absolute top-16 right-3 shadow-lg cursor-pointer pb-2 pt-1 z-10 border'>
                              {
                                identityProps.map((identity, index) => (
                                  <>
                                    <div key={index} 
                                        className="px-2 py-2 font-Poppins text-[12px] hover:bg-gray-50 hover:bg-opacity-50 hover:text-[#333] hover:text-opacity-50"
                                        onClick={() =>setIsOpen(prev => !prev)} 
                                    >
                                      {identity.label}
                                    </div>
                                    
                                  </>
                              ))}
                            </div>
                          )
                        }     
                </div>
              </div>

              <div className=''>
                Notifications
              </div>